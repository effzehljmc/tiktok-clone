generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [uuid_ossp(map: "uuid-ossp")]
}

model User {
  id        String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email     String     @unique
  username  String     @unique
  fullName  String?
  bio       String?
  image     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  comments  Comment[]
  following Follower[] @relation("user_following")
  followers Follower[] @relation("user_followers")
  likes     Like[]
  videos    Video[]
  metrics   VideoMetrics[]
}

model Video {
  id            String         @id @default(uuid()) @db.Uuid
  title         String
  description   String?
  videoUrl      String         @map("video_url")
  thumbnailUrl  String?        @map("thumbnail_url")
  duration      Int?
  viewsCount    Int            @default(0) @map("views_count")
  likesCount    Int            @default(0) @map("likes_count")
  commentsCount Int            @default(0) @map("comments_count")
  status        VideoStatus    @default(PROCESSING)
  isPrivate     Boolean        @default(false) @map("is_private")
  creatorId     String         @map("creator_id") @db.Uuid
  category      VideoCategory?
  tags          String[]
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime       @updatedAt @map("updated_at") @db.Timestamptz(6)
  comments      Comment[]
  likes         Like[]
  metrics       VideoMetrics[]
  creator       User           @relation(fields: [creatorId], references: [id])

  @@index([creatorId])
  @@index([createdAt(sort: Desc)])
  @@map("videos")
}

model Like {
  id        String   @id @default(uuid()) @db.Uuid
  videoId   String   @map("video_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
  @@map("likes")
}

model Follower {
  id             String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId         String   @db.Uuid
  followerUserId String   @db.Uuid
  createdAt      DateTime @default(now())
  followingUser  User     @relation("user_following", fields: [followerUserId], references: [id], onDelete: Cascade)
  user           User     @relation("user_followers", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, followerUserId])
  @@map("followers")
}

model Comment {
  id        String   @id @default(uuid()) @db.Uuid
  text      String
  videoId   String   @map("video_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@index([videoId])
  @@map("comments")
}

model VideoMetrics {
  id                    String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  videoId              String   @map("video_id") @db.Uuid
  userId               String   @map("user_id") @db.Uuid
  watchedSeconds       Int      @default(0) @map("watched_seconds")
  watchedAt            DateTime @default(now()) @map("watched_at") @db.Timestamptz(6)
  lastPosition         Int      @default(0) @map("last_position")
  completed            Boolean  @default(false)
  replayCount          Int      @default(0) @map("replay_count")
  averageWatchPercent  Float    @default(0) @map("average_watch_percent")
  video                Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
  @@index([videoId])
  @@index([userId])
  @@map("video_metrics")
}

enum VideoStatus {
  PROCESSING
  PUBLISHED
  FAILED
}

enum VideoCategory {
  MUSIC
  GAMING
  EDUCATION
  ENTERTAINMENT
  SPORTS
}
