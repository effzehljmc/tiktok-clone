generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "multiSchema"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  schemas    = ["public", "auth"]
  extensions = [uuid_ossp(map: "uuid-ossp"), pg_cron(), pg_graphql(), pg_stat_statements()]
}

model User {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  username      String    @unique
  email         String    @unique
  avatarUrl     String?   @map("avatar_url")
  bio           String?
  createdAt     DateTime  @default(now()) @map("created_at")
  videos        Video[]
  likes         Like[]
  comments      Comment[]
  followers     Follower[] @relation("user_followers")
  following     Follower[] @relation("user_following")
  savedRecipes  SavedRecipe[]
  shoppingLists ShoppingList[]
  variations    RecipeVariation[]
  metrics       VideoMetrics[]

  @@map("users")
  @@schema("public")
}

model Video {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId        String    @map("user_id") @db.Uuid
  title         String
  description   String?
  videoUrl      String    @map("video_url")
  thumbnailUrl  String    @map("thumbnail_url")
  status        VideoStatus @default(PROCESSING)
  category      VideoCategory
  createdAt     DateTime  @default(now()) @map("created_at")
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes         Like[]
  comments      Comment[]
  metrics       VideoMetrics[]
  recipe        RecipeMetadata?
  savedBy       SavedRecipe[]
  shoppingLists ShoppingList[]

  @@index([userId])
  @@map("videos")
  @@schema("public")
}

model Like {
  id        String   @id @default(uuid()) @db.Uuid
  videoId   String   @map("video_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
  @@map("likes")
  @@schema("public")
}

model Follower {
  id             String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId         String   @db.Uuid
  followerUserId String   @db.Uuid
  createdAt      DateTime @default(now())
  followingUser  User     @relation("user_following", fields: [followerUserId], references: [id], onDelete: Cascade)
  user           User     @relation("user_followers", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, followerUserId])
  @@map("followers")
  @@schema("public")
}

model Comment {
  id        String   @id @default(uuid()) @db.Uuid
  text      String
  videoId   String   @map("video_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@index([videoId])
  @@map("comments")
  @@schema("public")
}

model VideoMetrics {
  id                    String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  videoId              String   @map("video_id") @db.Uuid
  userId               String   @map("user_id") @db.Uuid
  watchedSeconds       Int      @default(0) @map("watched_seconds")
  watchedAt            DateTime @default(now()) @map("watched_at") @db.Timestamptz(6)
  lastPosition         Int      @default(0) @map("last_position")
  completed            Boolean  @default(false)
  replayCount          Int      @default(0) @map("replay_count")
  averageWatchPercent  Float    @default(0) @map("average_watch_percent")
  video                Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
  @@index([videoId])
  @@index([userId])
  @@map("video_metrics")
  @@schema("public")
}

model RecipeMetadata {
  id            String   @id @default(uuid()) @db.Uuid
  videoId       String   @unique @map("video_id") @db.Uuid
  ingredients   String[]
  cookingTime   Int      @map("cooking_time") // in minutes
  difficulty    String   // BEGINNER, INTERMEDIATE, ADVANCED
  cuisine       String   // e.g., Italian, Mexican, etc.
  servings      Int
  calories      Int?
  equipment     String[]
  dietaryTags   String[] @map("dietary_tags") // e.g., Vegetarian, Vegan, etc.
  steps         Json     // Array of {timestamp: number, description: string}
  video         Video    @relation(fields: [videoId], references: [id])
  variations    RecipeVariation[]

  @@index([videoId])
  @@map("recipe_metadata")
  @@schema("public")
}

model RecipeVariation {
  id              String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId          String   @db.Uuid @map("user_id")
  recipeId        String   @db.Uuid @map("recipe_id")
  title           String?
  ingredients     String[]
  equipment       String[]
  steps           Json     // Array of {timestamp: number, description: string}
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  aiPrompt        String   @map("ai_prompt") // Store the prompt that generated this variation
  originalPrompt  String   @map("original_prompt") // Store the user's original question
  variationType   VariationType @map("variation_type")
  metadata        Json?    // Store additional variation-specific metadata
  
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe         RecipeMetadata @relation(fields: [recipeId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([recipeId])
  @@map("recipe_variations")
  @@schema("public")
}

model SavedRecipe {
  id        String   @id @default(dbgenerated("uuid_generate_v4()"))
  userId    String   @map("user_id")
  videoId   String   @map("video_id")
  savedAt   DateTime @default(now()) @map("saved_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
  @@map("saved_recipes")
  @@schema("public")
}

model ShoppingList {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  ingredient  String
  quantity    String?
  unit        String?
  isChecked   Boolean  @default(false) @map("is_checked")
  recipeId    String?  @map("recipe_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe      Video?   @relation(fields: [recipeId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([recipeId])
  @@map("shopping_list")
  @@schema("public")
}

enum VideoStatus {
  PROCESSING
  PUBLISHED
  FAILED

  @@schema("public")
}

enum VideoCategory {
  MUSIC
  GAMING
  EDUCATION
  ENTERTAINMENT
  SPORTS
  COOKING
  BREAKFAST
  LUNCH
  DINNER
  DESSERT
  SNACKS
  DRINKS

  @@schema("public")
}

enum VariationType {
  DIETARY
  INGREDIENT_SUBSTITUTION
  PORTION_ADJUSTMENT
  COOKING_METHOD
  FLAVOR_PROFILE

  @@schema("public")
}
